initSidebarItems({"constant":[["ADD_CHECK_PATHSPEC",""],["ADD_DEFAULT",""],["ADD_DISABLE_PATHSPEC_MATCH",""],["ADD_FORCE",""],["DEFAULT",""],["DIFF_STATS_FULL","Equivalent of `--stat` in git"],["DIFF_STATS_INCLUDE_SUMMARY","Extended header information such as creations, renames and mode changes, equivalent of `--summary` in git"],["DIFF_STATS_NONE","Don't generate any stats"],["DIFF_STATS_NUMBER","Equivalent of `--numstat` in git"],["DIFF_STATS_SHORT","Equivalent of `--shortstat` in git"],["PATHSPEC_DEFAULT","Use the default pathspec matching configuration."],["PATHSPEC_FAILURES_ONLY","Means that the list returned does not need to keep the actual matching filenames. Use this to just test if there were any matches at all or in combination with `PATHSPEC_FAILURES` to validate a pathspec."],["PATHSPEC_FIND_FAILURES","Means that the list returned should track which patterns matched which files so that at the end of the match we can identify patterns that did not match any files."],["PATHSPEC_IGNORE_CASE","Force matching to ignore case, otherwise matching will use native case sensitivity fo the platform filesystem."],["PATHSPEC_NO_GLOB","Disable glob patterns and just use simple string comparison for matching."],["PATHSPEC_NO_MATCH_ERROR","Means that match functions return the error code `NotFound` if no matches are found. By default no matches is a success."],["PATHSPEC_USE_CASE","Force case sensitive matches, otherwise match will use the native case sensitivity of the platform filesystem."],["REPOSITORY_INIT_SHARED_ALL","Use `--shared=all` behavior, adding world readability."],["REPOSITORY_INIT_SHARED_GROUP","Use `--shared=group` behavior, chmod'ing the new repo to be group writable and \"g+sx\" for sticky group assignment"],["REPOSITORY_INIT_SHARED_UMASK","Use permissions configured by umask - the default"],["REVPARSE_MERGE_BASE","The spec used the `...` operator, which invokes special semantics."],["REVPARSE_RANGE","The spec targeted a range of commits"],["REVPARSE_SINGLE","The spec targeted a single object"],["SORT_NONE","Sort the repository contents in no particular ordering.This sorting is arbitrary, implementation-specific, and subject to change at any time. This is the default sorting for new walkers."],["SORT_REVERSE","Iterate through the repository contents in reverse order.This sorting mode can be combined with any others."],["SORT_TIME","Sort the repository contents by commit time.This sorting mode can be combined with topological sorting."],["SORT_TOPOLOGICAL","Sort the repository contents in topological order (parents before children).This sorting mode can be combined with time sorting."],["SSH_CUSTOM",""],["SSH_INTERACTIVE",""],["SSH_KEY",""],["SSH_MEMORY",""],["STATUS_CONFLICTED",""],["STATUS_CURRENT",""],["STATUS_IGNORED",""],["STATUS_INDEX_DELETED",""],["STATUS_INDEX_MODIFIED",""],["STATUS_INDEX_NEW",""],["STATUS_INDEX_RENAMED",""],["STATUS_INDEX_TYPECHANGE",""],["STATUS_WT_DELETED",""],["STATUS_WT_MODIFIED",""],["STATUS_WT_NEW",""],["STATUS_WT_RENAMED",""],["STATUS_WT_TYPECHANGE",""],["SUBMODULE_STATUS_INDEX_ADDED",""],["SUBMODULE_STATUS_INDEX_DELETED",""],["SUBMODULE_STATUS_INDEX_MODIFIED",""],["SUBMODULE_STATUS_IN_CONFIG",""],["SUBMODULE_STATUS_IN_HEAD",""],["SUBMODULE_STATUS_IN_INDEX",""],["SUBMODULE_STATUS_IN_WD",""],["SUBMODULE_STATUS_WD_ADDED",""],["SUBMODULE_STATUS_WD_DELETED",""],["SUBMODULE_STATUS_WD_INDEX_MODIFIED",""],["SUBMODULE_STATUS_WD_MODIFIED",""],["SUBMODULE_STATUS_WD_UNINITIALIZED",""],["SUBMODULE_STATUS_WD_UNTRACKED",""],["SUBMODULE_STATUS_WD_WD_MODIFIED",""],["USERNAME",""],["USER_PASS_PLAINTEXT",""]],"enum":[["AutotagOption","Automatic tag following options."],["BranchType","An enumeration for the possible types of branches"],["ConfigLevel","An enumeration of the possible priority levels of a config file.The levels corresponding to the escalation logic (higher to lower) when searching for config entries."],["Delta","What type of change is described by a `DiffDelta`?"],["DiffBinaryKind","When producing a binary diff, the binary data returned will be either the deflated full (\"literal\") contents of the file, or the deflated binary delta between the two sides (whichever is smaller)."],["DiffFormat","Possible output formats for diff data"],["Direction","An enumeration of the possible directions for a remote."],["ErrorClass","An enumeration of possible categories of things that can have errors when working with a git repository."],["ErrorCode","An enumeration of possible errors that can happen when working with a git repository."],["FetchPrune","Configuration for how pruning is done on a fetch"],["FileFavor","Merge file favor options for `MergeOptions` instruct the file-level merging functionality how to deal with conflicting regions of the files."],["ObjectType","An enumeration all possible kinds objects may have."],["RepositoryState","A listing of the possible states that a repository can be in."],["ResetType","An enumeration of the operations that can be performed for the `reset` method on a `Repository`."],["StatusShow","Enumeration of possible methods of what can be shown through a status operation."],["SubmoduleIgnore","Submodule ignore valuesThese values represent settings for the `submodule.$name.ignore` configuration value which says how deeply to look at the working directory when getting the submodule status."]],"mod":[["build","Builder-pattern objects for configuration various git operations."],["cert","Certificate types which are passed to `CertificateCheck` in `RemoteCallbacks`."],["oid_array","Bindings to libgit2's raw git_strarray type"],["string_array","Bindings to libgit2's raw git_strarray type"],["transport","Interfaces for adding custom transports to libgit2"]],"struct":[["AnnotatedCommit","A structure to represent an annotated commit, the input to merge and rebase.An annotated commit contains information about how it was looked up, which may be useful for functions like merge or rebase to provide context to the operation."],["Blame","Opaque structure to hold blame results."],["BlameHunk","Structure that represents a blame hunk."],["BlameIter","An iterator over the hunks in a blame."],["BlameOptions","Blame options"],["Blob","A structure to represent a git blob"],["Branch","A structure to represent a git branchA branch is currently just a wrapper to an underlying `Reference`. The reference can be accessed through the `get` and `unwrap` methods."],["Branches","An iterator over the branches inside of a repository."],["Buf","A structure to wrap an intermediate buffer used by libgit2.A buffer can be thought of a `Vec<u8>`, but the `Vec` type is not used to avoid copying data back and forth."],["Commit","A structure to represent a git commit"],["Config","A structure representing a git configuration key/value store"],["ConfigEntries","An iterator over the `ConfigEntry` values of a `Config` structure."],["ConfigEntry","A struct representing a certain entry owned by a `Config` instance.An entry has a name, a value, and a level it applies to."],["Cred","A structure to represent git credentials in libgit2."],["CredentialHelper","Management of the gitcredentials(7) interface."],["CredentialType","Types of credentials that can be requested by a credential callback."],["Deltas","An iterator over the diffs in a delta"],["Describe","The result of a `describe` operation on either an `Describe` or a `Repository`."],["DescribeFormatOptions","Options which can be used to customize how a description is formatted."],["DescribeOptions","Options which indicate how a `Describe` is created."],["Diff","The diff object that contains all individual file deltas.This is an opaque structure which will be allocated by one of the diff generator functions on the `Repository` structure (e.g. `diff_tree_to_tree` or other `diff_*` functions)."],["DiffBinary","Structure describing the binary contents of a diff."],["DiffBinaryFile","The contents of one of the files in a binary diff."],["DiffDelta","Description of changes to one entry."],["DiffFile","Description of one side of a delta.Although this is called a \"file\" it could represent a file, a symbolic link, a submodule commit id, or even a tree (although that only happens if you are tracking type changes or ignored/untracked directories)."],["DiffFindOptions","Control behavior of rename and copy detection"],["DiffHunk","Structure describing a hunk of a diff."],["DiffLine","Structure describing a line (or data span) of a diff."],["DiffOptions","Structure describing options about how the diff should be executed."],["DiffStats","Structure describing a hunk of a diff."],["DiffStatsFormat","Formatting options for diff stats"],["Error","A structure to represent errors coming out of libgit2."],["FetchOptions","Options which can be specified to various fetch operations."],["Index","A structure to represent a git index"],["IndexAddOption","Flags for APIs that add files matching pathspec"],["IndexEntries","An iterator over the entries in an index"],["IndexEntry","A structure to represent an entry or a file inside of an index.All fields of an entry are public for modification and inspection. This is also how a new index entry is created."],["IndexTime","Time structure used in a git index entry."],["MergeOptions","Options to specify when merging."],["Note","A structure representing a note in git."],["Notes","An iterator over all of the notes within a repository."],["Object","A structure to represent a git object"],["Oid","Unique identity of any object (commit, tree, blob, tag)."],["Parents","An iterator over the parent commits of a commit."],["Pathspec","Structure representing a compiled pathspec used for matching against various structures."],["PathspecDiffEntries","Iterator over the matching diff deltas."],["PathspecEntries","Iterator over the matched paths in a pathspec."],["PathspecFailedEntries","Iterator over the failed list of pathspec items that did not match."],["PathspecFlags","..."],["PathspecMatchList","List of filenames matching a pathspec."],["Progress","Struct representing the progress by an in-flight transfer."],["PushOptions","Options to control the behavior of a git push."],["Reference","A structure to represent a git reference."],["ReferenceNames","An iterator over the names of references in a repository."],["References","An iterator over the references in a repository."],["Reflog","A reference log of a git repository."],["ReflogEntry","An entry inside the reflog of a repository"],["ReflogIter","An iterator over the entries inside of a reflog."],["Refspec","A structure to represent a git refspec.Refspecs are currently mainly accessed/created through a `Remote`."],["Refspecs","An iterator over the refspecs that a remote contains."],["Remote","A structure representing a remote of a git repository.The lifetime is the lifetime of the repository that it is attached to. The remote is used to manage fetches and pushes as well as refspecs."],["RemoteCallbacks","A structure to contain the callbacks which are invoked when a repository is being updated or downloaded.These callbacks are used to manage facilities such as authentication, transfer progress, etc."],["RemoteHead","Description of a reference advertised bya remote server, given out on calls to `list`."],["Repository","An owned git repository, representing all state associated with the underlying filesystem.This structure corresponds to a `git_repository` in libgit2. Many other types in git2-rs are derivative from this structure and are attached to its lifetime.When a repository goes out of scope it is freed in memory but not deleted from the filesystem."],["RepositoryInitMode","Mode options for RepositoryInitOptions"],["RepositoryInitOptions","Options which can be used to configure how a repository is initialized"],["RevparseMode","Flags for the return value of `Repository::revparse`"],["Revspec","A revspec represents a range of revisions within a repository."],["Revwalk","A revwalk allows traversal of the commit graph defined by including one or more leaves and excluding one or more roots."],["Signature","A Signature is used to indicate authorship of various actions throughout the library.Signatures contain a name, email, and timestamp. All fields can be specified with `new`, the `now` constructor omits the timestamp, and the `default` constructor reads configuration from the given repository."],["Sort","Orderings that may be specified for Revwalk iteration."],["Status","Status flags for a single fileA combination of these values will be returned to indicate the status of a file.  Status compares the working directory, the index, and the current HEAD of the repository.  The `STATUS_INDEX_*` set of flags represents the status of file in the index relative to the HEAD, and the `STATUS_WT_*` set of flags represent the status of the file in the working directory relative to the index."],["StatusEntry","A structure representing an entry in the `Statuses` structure.Instances are created through the `.iter()` method or the `.get()` method."],["StatusIter","An iterator over the statuses in a `Statuses` instance."],["StatusOptions","Options that can be provided to `repo.statuses()` to control how the status information is gathered."],["Statuses","A container for a list of status information about a repository.Each instances appears as a if it were a collection, having a length and allowing indexing as well as provding an iterator."],["Submodule","A structure to represent a git submodule"],["SubmoduleStatus","Return codes for submodule status.A combination of these flags will be returned to describe the status of a submodule.  Depending on the \"ignore\" property of the submodule, some of the flags may never be returned because they indicate changes that are supposed to be ignored.Submodule info is contained in 4 places: the HEAD tree, the index, config files (both .git/config and .gitmodules), and the working directory.  Any or all of those places might be missing information about the submodule depending on what state the repo is in.  We consider all four places to build the combination of status flags.There are four values that are not really status, but give basic info about what sources of submodule data are available.  These will be returned even if ignore is set to \"ALL\".IN_HEAD   - superproject head contains submodule IN_INDEX  - superproject index contains submodule IN_CONFIG - superproject gitmodules has submodule IN_WD     - superproject workdir has submodule The following values will be returned so long as ignore is not \"ALL\".INDEX_ADDED       - in index, not in head INDEX_DELETED     - in head, not in index INDEX_MODIFIED    - index and head don't match WD_UNINITIALIZED  - workdir contains empty directory WD_ADDED          - in workdir, not index WD_DELETED        - in index, not workdir WD_MODIFIED       - index and workdir head don't match The following can only be returned if ignore is \"NONE\" or \"UNTRACKED\".WD_INDEX_MODIFIED - submodule workdir index is dirty WD_WD_MODIFIED    - submodule workdir has modified files Lastly, the following will only be returned for ignore \"NONE\".WD_UNTRACKED      - wd contains untracked files"],["Tag","A structure to represent a git tag"],["Time","Time in a signature"],["Tree","A structure to represent a git tree"],["TreeBuilder","Constructor for in-memory trees"],["TreeEntry","A structure representing an entry inside of a tree. An entry is borrowed from a tree."],["TreeIter","An iterator over the entries in a tree."]],"trait":[["IntoCString","A class of types that can be converted to C strings.These types are represented internally as byte slices and it is quite rare for them to contain an interior 0 byte."]],"type":[["Credentials","Callback used to acquire credentials for when a remote is fetched.`url` - the resource for which the credentials are required. `username_from_url` - the username that was embedded in the url, or `None`                     if it was not included. `allowed_types` - a bitmask stating which cred types are ok to return."],["IndexMatchedPath","A callback function to filter index matches.Used by `Index::{add_all,remove_all,update_all}`.  The first argument is the path, and the second is the patchspec that matched it.  Return 0 to confirm the operation on the item, > 0 to skip the item, and < 0 to abort the scan."],["TransferProgress","Callback to be invoked while a transfer is in progress.This callback will be periodically called with updates to the progress of the transfer so far. The return value indicates whether the transfer should continue. A return value of `false` will cancel the transfer.`progress` - the progress being made so far."],["TransportMessage","Callback for receiving messages delivered by the transport.The return value indicates whether the network operation should continue."],["UpdateTips","Callback for whenever a reference is updated locally."]]});